
DROP TABLE a3_transactions CASCADE CONSTRAINTS;  
DROP TABLE a3_ACCOUNTS CASCADE CONSTRAINTS;   
DROP TABLE a3_customers CASCADE CONSTRAINTS;   
DROP TABLE a3_account_types CASCADE CONSTRAINTS;    
DROP SEQUENCE accNoSeq;


CREATE TABLE a3_account_types (
    accountType CHAR(1) PRIMARY KEY,
    typeName VARCHAR2(15) NOT NULL
);
    
CREATE TABLE a3_customers (
    customerID INT GENERATED BY DEFAULT ON NULL AS IDENTITY(START WITH 4000 INCREMENT BY 3) PRIMARY KEY,
    firstName VARCHAR2(20) NOT NULL,
    lastName VARCHAR2(20) NOT NULL,
    email VARCHAR2(50) NOT NULL,
    DOB DATE,
    phone VARCHAR2(10)
);

CREATE TABLE a3_ACCOUNTS (
    accountNo INT PRIMARY KEY,
    accountType CHAR(1) NOT NULL,
    customerID INT NOT NULL,
    currentBalance NUMBER(10,2) NOT NULL,
    dtOpen DATE DEFAULT(sysdate),
    isActive SMALLINT DEFAULT(1) NOT NULL,
    CONSTRAINT balance_chk CHECK(currentBalance>=0),
    CONSTRAINT active_chk CHECK(isActive IN (1,0)),
    CONSTRAINT type_fk FOREIGN KEY(customerID) REFERENCES a3_customers,
    CONSTRAINT acc_type_fk FOREIGN KEY(accountType) REFERENCES a3_account_types
);



CREATE TABLE a3_transactions (
    transactionId INT GENERATED BY DEFAULT ON NULL AS IDENTITY(START WITH 1000000 INCREMENT BY 1) PRIMARY KEY,
    accountNo INT NOT NULL,
    transactionType CHAR(1) NOT NULL,
    amount NUMBER(10,2) NOT NULL,
    descriptionT VARCHAR2(25) NOT NULL,
    transDate DATE DEFAULT(sysdate) NOT NULL,
    refNum VARCHAR2(12),
    CONSTRAINT account_fk FOREIGN KEY(accountNo) REFERENCES a3_ACCOUNTS,
    CONSTRAINT trans_type_chk CHECK(upper(transactionType) IN ('C','D'))   
);


CREATE SEQUENCE accNoSeq
    INCREMENT BY 3
    START WITH 100000
    ORDER;

CREATE OR REPLACE TRIGGER accountNo_gen
    BEFORE INSERT ON a3_accounts
    FOR EACH ROW
BEGIN
    SELECT accNoSeq.NEXTVAL
    INTO: new.accountNo
    FROM dual;
END;
/

--1.a Create customer
INSERT INTO a3_account_types
    VALUES('C','Chequing');

INSERT INTO a3_account_types
    VALUES('S','Saving');
    
INSERT INTO a3_customers (firstName, lastName, email)
    VALUES('Jianwen','Yang','jyang219@myseneca.ca');
COMMIT; 

--1.b create account and deposite
INSERT INTO a3_ACCOUNTS (accountType, customerId, currentBalance)
    VALUES('C',
    (SELECT customerId FROM a3_customers
        WHERE upper(email)='JYANG219@MYSENECA.CA')
    ,500);
SAVEPOINT create_cq;

INSERT INTO a3_transactions (accountNo, transactionType, amount, descriptionT)
    VALUES (
         (SELECT accountNo FROM a3_accounts
              WHERE upper(accountType)='C' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA')),
         'D',
         500,
         'open account'
    );

COMMIT;

--1.c 
-- create saving account
INSERT INTO a3_ACCOUNTS (accountType, customerId, currentBalance)
    VALUES('S',
    (SELECT customerId FROM a3_customers
        WHERE upper(email)='JYANG219@MYSENECA.CA')
    ,0);

SAVEPOINT create_saving;

UPDATE a3_accounts SET currentBalance=currentBalance+1000
    WHERE upper(accountType)='S' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA');


INSERT INTO a3_transactions (accountNo, transactionType, amount, descriptionT)
    VALUES (
         (SELECT accountNo FROM a3_accounts
              WHERE upper(accountType)='S' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA')),
         'C',
         1000,
         'e-transfer'
    );
  
COMMIT;

--1.d BUY groceries

-- create procedure which excute debit money
CREATE OR REPLACE PROCEDURE trans(
                                  acc_email IN VARCHAR2,
                                  acc_type IN VARCHAR2,
                                  t_amount IN NUMERIC,
                                  t_desc IN VARCHAR2,
                                  note IN VARCHAR2
                                  )
AS
    v_account INTEGER;
    v_amount NUMERIC;
BEGIN

--VARIFY IF ACCOUNT EXISTS
    SELECT accountNo INTO v_account
        FROM a3_accounts WHERE accountType=acc_type AND (customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA'));
                                                    
IF v_account=0 THEN
    
     dbms_output.put_line('ACCOUNT NOY EXISTS');
     
     ELSE
        SELECT currentBalance INTO v_amount
            FROM a3_accounts WHERE accountNo=v_account;
--varify balance
            IF v_amount<(-t_amount) THEN
            
            dbms_output.put_line('NO ENOUGH BALANCE');
            
            ELSE
--change the balance             
             UPDATE a3_accounts SET currentBalance=currentBalance+t_amount
                WHERE accountNo=v_account;
--record the transaction information           
             INSERT INTO a3_transactions (accountNo, transactionType, amount, descriptionT,refNum)
                VALUES (
                          v_account,
                          'D',
                          t_amount,
                          t_desc,
                          note
                         );
 
            END IF;
              
  END IF;
  END;
 /    
BEGIN
    trans('JYANG219@MYSENECA.CA','C',-112.34,'Walmart canada','');
END;
/
COMMIT;

--1.e purchase from iTunes
BEGIN
     trans('JYANG219@MYSENECA.CA','C',-1.99,'iTunes','CQ3E5RZ');
END;
/
COMMIT;

--1.f pay rent
BEGIN
     trans('JYANG219@MYSENECA.CA','C',-1600,'first last rent','Cheque#005');
END;
/
COMMIT;
--1.g bank chargr for NSF
BEGIN
     trans('JYANG219@MYSENECA.CA','C',-45,'NSF','Cheque#005');
END;
/
COMMIT;

--1.h withdraw from RESP and deposit to saving
-- create RESP account and assuming the balance is $3000
INSERT INTO a3_account_types
    VALUES('R','RESP');
    
INSERT INTO a3_ACCOUNTS (accountType, customerId, currentBalance)
    VALUES('R',
    (SELECT customerId FROM a3_customers
        WHERE upper(email)='JYANG219@MYSENECA.CA')
    ,3000);

SAVEPOINT create_resp;

--start transaction of this senario

--withdraw $2000 from RESP, if the balance is not enough, system reports error
UPDATE a3_accounts SET currentBalance=currentBalance-2000
    WHERE upper(accountType)='R' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA');
                                                    
--deposite $2000 to saving account,if this account is not exist, system reports error
UPDATE a3_accounts SET currentBalance=currentBalance+2000
    WHERE upper(accountType)='S' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA');

--save transaction information into transaction table
INSERT INTO a3_transactions (accountNo, transactionType, amount, descriptionT)
    VALUES (
         (SELECT accountNo FROM a3_accounts
              WHERE upper(accountType)='R' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA')),
         'D',
         -2000,
         'RESP'
    );

INSERT INTO a3_transactions (accountNo, transactionType, amount, descriptionT)
    VALUES (
         (SELECT accountNo FROM a3_accounts
              WHERE upper(accountType)='S' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA')),
         'C',
         2000,
         'RESP'
    );
--if the transaction fails at any step above or report error, rollback to create_resp
--ROLLBACK TO SAVEPOINT create_resp  
COMMIT;  
 
--1.i get certificate cheque for rent
BEGIN
     trans('JYANG219@MYSENECA.CA','S',-1633,'first last rent','CHQ CERTI');
END;
/
COMMIT;
--1.j get cash to pay for friend's help
BEGIN
     trans('JYANG219@MYSENECA.CA','C',-40,'cash withdraw','');
END;
/
COMMIT;

--1.k pay roger's bill

--create roger's account and set account number to 345678
INSERT INTO a3_account_types
    VALUES('T','TELE_ROGERS');
    
INSERT INTO a3_ACCOUNTS (accountType, customerId, currentBalance)
    VALUES('T',
    (SELECT customerId FROM a3_customers
        WHERE upper(email)='JYANG219@MYSENECA.CA')
    ,0);
UPDATE a3_ACCOUNTS SET accountno=345678
    WHERE upper(accounttype)='T';
    
SAVEPOINT create_tele_bill;

--start transaction of this senario

--withdraw $64.45 from checking, if the balance is not enough, system reports error
UPDATE a3_accounts SET currentBalance=currentBalance-64.45
    WHERE upper(accountType)='C' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA');
                                                    
--deposite $64.45 to your rogers account, if this account is not exist, system reports error
UPDATE a3_accounts SET currentBalance=currentBalance+64.45
    WHERE accountno=345678;

--save transaction information into transaction table
INSERT INTO a3_transactions (accountNo, transactionType, amount, descriptionT)
    VALUES (
         (SELECT accountNo FROM a3_accounts
              WHERE upper(accountType)='C' AND customerId=(SELECT customerId FROM a3_customers
                                                    WHERE upper(email)='JYANG219@MYSENECA.CA')),
         'D',
         -64.45,
         'Rogers bill'
    );

INSERT INTO a3_transactions (accountNo, transactionType, amount, descriptionT,refNum)
    VALUES (
         345678,
         'C',
         64.45,
         'Rogers bill',
         'X8U2'
    );
--if the transaction fails at any step above, rollbakc to create_tele_bill
--ROLLBACK TO SAVEPOINT create_tele_bill;
COMMIT;



--2.a show transactions and balance
--NOT include RESP account and ROGERS account, saving and chequing ONLY

SELECT transactionId, to_char(transdate, 'mm/dd/yyyy') AS "Date",
       descriptionT AS "Details",
       (CASE WHEN amount>0 THEN to_char(amount,'99999.99') ELSE ' ' END)AS "Credits",
       (CASE WHEN amount<0 THEN to_char(amount,'99999.99') ELSE ' ' END)AS "Debits",
       sum(amount)over(ORDER BY transactionid) AS "Balance"
    FROM a3_transactions t JOIN a3_accounts a ON (a.accountNo=t.accountNo)
    WHERE upper(a.accounttype) IN ('C','S');
 
   
--2.b  Calulate total debits and total credits
--NOT include RESP account and ROGERS account, saving and chequing ONLY
SELECT sum(CASE WHEN amount>0 THEN amount ELSE 0 END)AS "Credits",
       sum(CASE WHEN amount<0 THEN amount ELSE 0 END)AS "Debits"
    FROM a3_transactions t JOIN a3_accounts a ON (a.accountNo=t.accountNo)
    WHERE upper(a.accounttype) IN ('C','S');
    
--2.c Varify the accumulated amount is same as balance
--NOT include RESP account and ROGERS account, saving and chequing ONLY
 SELECT 
    CASE WHEN
             ((SELECT sum(amount)
                FROM a3_transactions t JOIN a3_accounts a ON (a.accountNo=t.accountNo)
                WHERE upper(a.accounttype) IN ('C','S')) -
             (SELECT sum(currentbalance) 
                FROM a3_accounts 
                WHERE rownum<3 ))=0 
 THEN
 'OUTPUT MATCHED'
 ELSE
    to_char((SELECT sum(amount)
                FROM a3_transactions t JOIN a3_accounts a ON (a.accountNo=t.accountNo)
                WHERE upper(a.accounttype) IN ('C','S')) -
            (SELECT sum(currentbalance) 
                FROM a3_accounts 
                WHERE rownum<3) ,'9999.99')
 
 END
 AS "chk balance" FROM dual; 
